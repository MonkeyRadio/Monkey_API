import { faker } from '@faker-js/faker';
import { Test, TestingModule } from '@nestjs/testing';
import { Connection, connect, Mongoose, Model } from "mongoose";
import { RedisMemoryServer } from 'redis-memory-server';
import { MongoMemoryServer } from "mongodb-memory-server";
import { MongooseModule, getConnectionToken } from '@nestjs/mongoose';
import { RedisModule } from '@songkeys/nestjs-redis';
import { ${{Module}}Module } from '@/${{module}}.module';
import { NestExpressApplication } from '@nestjs/platform-express';
import * as supertest from 'supertest';
import { ValidationPipe } from '@nestjs/common';

describe('${{Module}}Controller - ${{test_suite}}', () => {
  let redisd: RedisMemoryServer;
  let mongod: MongoMemoryServer;
  let module: TestingModule;
  let app: NestExpressApplication;
  let mongoConection: Mongoose;

  const apiClient = () => {
    return supertest(app.getHttpServer());
  };

  beforeAll(async () => {
    mongod = await MongoMemoryServer.create();
    const mogiuri = mongod.getUri();
    mongoConection = await connect(mogiuri);
    redisd = await RedisMemoryServer.create();
    const redisHost = await redisd.getHost();
    const redisPort = await redisd.getPort();
    module = await Test.createTestingModule({
      imports: [
        MongooseModule.forRoot(mogiuri),
        RedisModule.forRoot({
          closeClient: true,
          config: {
            host: redisHost,
            port: redisPort
          }
        }),
        ${{Module}}Module
      ],
    }).compile();

    app = module.createNestApplication<NestExpressApplication>();
    app.useGlobalPipes(new ValidationPipe({
      transform: true,
    }));
    await app.init();
  });

  afterAll(async () => {
    await (app.get(getConnectionToken()) as Connection).db.dropDatabase();
    await app.close();
    await mongoConection.disconnect();
    await mongod.stop();
    await redisd.stop();
  });

  afterEach(async () => {
    const collections = await (app.get(getConnectionToken()) as Connection).db.collections();
    for (const key in collections) {
      const collection = collections[key];
      await collection.deleteMany({});
    }
  });


  // Your Tests HERE

  

});
